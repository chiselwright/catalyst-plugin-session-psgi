## \_psgi\_env

Fetches the psgi env globally from the request env

# EXPERIMENTAL

This distribution should be considered **experimental**. Although functional, it
may break in currently undiscovered use cases.

# SYNOPSIS

When running under PSG/Plack with Session middeware enabled you can use the
PSGI session as follows:

    use Catalyst qw/
        Session
        Session::State::PSGI
        Session::Store::PSGI
    /;

# SUMMARY

If you are running your [Catalyst](https://metacpan.org/pod/Catalyst) application in a Plack/PSGI environment and
using [Plack::Middleware::Session](https://metacpan.org/pod/Plack::Middleware::Session) you might want to consider using the
session information in the PSGI environment.

The [Catalyst::Plugin::Session::State::PSGI](https://metacpan.org/pod/Catalyst::Plugin::Session::State::PSGI) and
[Catalyst::Plugin::Session::Store::PSGI](https://metacpan.org/pod/Catalyst::Plugin::Session::Store::PSGI) modules access the
_psgix.session.options_ and _psgix.session_ data to provide the Catalyst
session.

# AREAS OF CONCERN

As this is an early, experimental release I thought it only fair to share the
glaring areas of concern:

- session expiry

    I currently believe that it should be the responsibility of the [Plack](https://metacpan.org/pod/Plack)
    middleware to expire and clear session data. As far as possible this
    functionality is unimplemented and unsupported in this distribution.

- session expiry value initialisation

    There was a problem with the session expiry value being unset in the Catalyst
    related code. This led to sessions always being deleted/expired and never
    working properly.

    There are a couple of dubious areas to resolve this.

        sub get_session_data {
            # ...

            # TODO: work out correct place to initialise this
            $psgi_env->{'psgix.session.expires'}
                ||= $c->get_session_expires;

            # ...
        }

    is almost certainly the wrong time and place to be initialising this value, but
    it works and I'm open to clue-sticks and patches.

        sub get_session_expires {
            my $c = shift;
            my $expires = $c->_session_plugin_config->{expires} || 0;
            return time() + $expires;
        }

    worries me because I have no idea where the value for
    `$c->_session_plugin_config->{expires}` is being initialised. I'm concerned
    that this may become `0` when you least expect it and start expiring all
    sessions.

- (lack of) test coverage

    Other than basic sanity tests provided by [Dist::Zilla](https://metacpan.org/pod/Dist::Zilla) this distribution **has no tests**!

    I haven't found the time to mock up a plack-catalyst test suite to ensure the
    session is doing the right thing. Once again I'm open to clue-sticks and
    patches.

# SEE ALSO

[Catalyst](https://metacpan.org/pod/Catalyst),
[Catalyst::Plugin::Session](https://metacpan.org/pod/Catalyst::Plugin::Session),
[Plack::Middleware::Session](https://metacpan.org/pod/Plack::Middleware::Session),
[Catalyst::Plugin::Session::State::PSGI](https://metacpan.org/pod/Catalyst::Plugin::Session::State::PSGI),
[Catalyst::Plugin::Session::Store::PSGI](https://metacpan.org/pod/Catalyst::Plugin::Session::Store::PSGI)
